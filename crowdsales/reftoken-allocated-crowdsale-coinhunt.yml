##
# This is an example for deploying a crowdsale compatible EIP-20 token to several networks.
# This will deploy a new token using the default coinbase account on the desired chain.
#
# local:
#	First start a transient local Ethereum chain using populus and geth:
#		populus chain run local
#
#	This will start a private chain running geth in port 8548. The first launch might be slow as it has to generate 1 GB DAG file.
#	Leave populus + geth running on the background.
#
# kovan:
#	
#
# main:
#	
#
# Then in another terminal you can run a command to deploy this token script:
#	deploy-contracts \
#	   --address=[my deploy account address account on geth having some ETH] \Â¨
#	   --deployment-file=crowdsales/reftoken-crowdsale-template.yml \
#	   --deployment-name=[local|kovan|main]
#
# Running the command takes ~60 seconds in local.
#
# You can find it your coinbase account (account 0) by doing:
# 	geth attach http://localhost:8548
#	> eth.accounts
#		["0xce90d9e5024e97f3123999aae6a1c395bb3c2013"]
##

# This is the deployment-name parameter.
# We can have multiple deployments in a single YAML file.
local:

    # This is the chain name in populus.json
    chain: local
    
    # We cannot verify the contract on EtherScan, because EtherScan only supports public nets
    verify_on_etherscan: no

    contracts:
        # This is the address of the "Team multisignature wallet" where the payments eventually land
        # Replace with your predeployed multisignature wallet contract address.
        #
        # We assume this wallet has been deployed beforehand using wallet.gnosis.pm service and your team members
        # have been set as the owners of this wallet.
        #
        # For testing purposes, e.g. on local/Kovan network you can use any account on your geth / Parity here.
        #
        team_multisig:
            contract_name: MultiSigWallet
            contract_file: GnosisWallet.sol
            address: ""

	   #
        # Pre-ICO fund collector
        #
        # Pre-ICO contract allows high volume investors to place their
        # Pre-ICO has a minimum buy in defined as volume.
        # Pre-ICO investments have a preferred pricing (see later).
        #
        # Pre-ICO owner (team multisig) can set the ICO contract address
        # later, it does not have to be availalble at the start of the ICO.
        # After the ICO contract is set, anyone can trigger the moving of funds
        # to the ICO contract.
        #
        # If the actual ICO does not happen, the investors can claim refund
        # after freezeEndsAt date.
        #
        preico:
            contract_name: PresaleFundCollector
            contract_file: PresaleFundCollector.sol
            arguments:
                _owner: "{{contracts.team_multisig.address}}"
                # Set 30 days in the future from the moment of deployment
                _freezeEndsAt: "{{ time() + 30*24*3600 }}"
                _weiMinimumLimit: "{{ to_wei(100, 'ether') }}"

        #
        # Token contract
        #
        # This contract represents ERC-20 token.
        # It has transfer lock up functionality to prevent the token to be transferable until the ICO is over.
        #
        # We create the whole token supply upfront and no more token minting happens ever.
        #
        # Token has 8 decimals and supply of 1B tokens.
        #
        # Name and symbol are not set yet. They are set later. In the case of the deployment fails and we need redeploy
        # we do not create unnecessary entries in token explorers.
        #
        token:
            contract_name: BurnableCrowdsaleToken
            contract_file: BurnableCrowdsaleToken.sol
            arguments:
                _name: ""
                _symbol: ""
                _initialSupply: "{{ 1000000000*10**8 }}"
                _decimals: 8
                _mintable: false

        #
        # Pricing strategy.
        #
        # Pricing strategy defines the price of a token in the different stages of the crowdsale.
        #
        # We use ETH tranches. People who buy in in the first
        # tranches get 20% and 10% bonus tokens.
        #
        pricing_strategy:
            contract_name: EthTranchePricing
            contract_file: EthTranchePricing.sol
            arguments:
                _tranches:
                    # This trance starts instantly.
                    # How many weis one token costs. 90% bonus tier.
                    # Price is 500 CHUNT / ETH => 0.002 ETH / CHUNT
                    - 0
                    - 2000000000000000

                    # This trance starts when we have sold 50k worth of tokens.
                    # Token price is 75% bonus tokens 100 CHUNT / ETH => 0.005 ETH / CHUNT
                    - "{{ to_wei('30000.00', 'ether') }}"
                    - 5000000000000000

                    # This trance starts when we have sold 100k worth of tokens.
                    # Token price is 50% bonus tokens 100 CHUNT / ETH => 0.01 ETH / CHUNT
                    - "{{ to_wei('100000.00', 'ether') }}"
                    - 10000000000000000

                    # This is the base price that is effective until the token
                    # sale ends. Price is 50 CHUNT / ETH => 0.02 ETH / CHUNT
                    - "{{ to_wei('200000.00', 'ether') }}"
                    - 20000000000000000

                    # Dummy milestone marker to mark the end
                    # of the array.
                    - "{{ to_wei('999999999999999', 'ether') }}"
                    - 0


        #
        # Crowdsale.
        #
        # We use allocated crowdsale as the whole token supply has been created beforehand.
        # No minting. Later we use approve() to give tokens for this contract to be sold.
        #
        crowdsale:
            contract_name: AllocatedCrowdsale
            contract_file: AllocatedCrowdsale.sol
            arguments:
                _token: "{{contracts.token.address}}"
                _pricingStrategy: "{{contracts.pricing_strategy.address}}"
                _multisigWallet: "{{contracts.team_multisig.address}}"
                _start: "{{ timestamp(datetime(2099, 7, 12, 13, 00)) }}"
                _end: "{{ timestamp(datetime(2099, 7, 26, 13, 00)) }}"
                _minimumFundingGoal: "{{ to_wei(10000, 'ether') }}"
                _beneficiary: "{{deploy_address}}"

        #
        # Finalize contract
        #
        # Finalize contract defines what happens at the end of the successful crowdsale.
        #
        # Because deploy_address controls whole supply,
        # we do not create any supply dynamically,
        # we do not need a finalizer.
        #
        finalize_agent:
            contract_name: NullFinalizeAgent
            contract_file: NullFinalizeAgent.sol
            arguments:
                _crowdsale: "{{contracts.crowdsale.address}}"

    # Post-deployment actions connect contracts together.
    # They set ownership and allowed actions, so that contracts can interact
    post_actions: |

        # Allow crowdsale contract to sell its token
        token.transact({"from": deploy_address}).approve(crowdsale.address, 1000000000*10**8)

        # Make sure crowdsale contract and these accounts
        # can transfer tokens despite transfer lock up
        token.transact({"from": deploy_address}).setTransferAgent(team_multisig.address, True)
        token.transact({"from": deploy_address}).setTransferAgent(crowdsale.address, True)
        token.transact({"from": deploy_address}).setTransferAgent(finalize_agent.address, True)
        token.transact({"from": deploy_address}).setTransferAgent(deploy_address, True)

        # Do not do nothing at the end of the crowdsale
        confirm_tx(crowdsale.transact({"from": deploy_address}).setFinalizeAgent(finalize_agent.address))

        # Owner can release the token transfer when he wants to
        confirm_tx(token.transact({"from": deploy_address}).setReleaseAgent(deploy_address))

        # Set token upgrade master to team multisig to give the new token path
        confirm_tx(token.transact({"from": deploy_address}).setUpgradeMaster(team_multisig.address))

        # Allow test buys from these accounts before token sale begins.
        # The latest one is a presale contract address.
        # Presale contract (PreICOProxyBuyer) can move in funds and get tokens before the actual start time.
        confirm_multiple_txs( \
          crowdsale.transact({"from": deploy_address}).setEarlyParicipantWhitelist(deploy_address, True), \
          crowdsale.transact({"from": deploy_address}).setEarlyParicipantWhitelist("0x6d997eDcA04282950416FA380d834f360fC36eBb", True) \
        )

        # We set a special price, outside ETH tranches, for a presale contract
        confirm_tx(pricing_strategy.transact({"from": deploy_address}).setPreicoAddress("0x6d997eDcA04282950416FA380d834f360fC36eBb", 2083333333333))

    # Sanity check
    verify_actions: |
        assert token.call().owner().lower() == deploy_address.lower()
        assert token.call().released() == False
        assert crowdsale.call().owner().lower() == deploy_address.lower()
        assert crowdsale.call().multisigWallet().lower() == team_multisig.address.lower()
        assert finalize_agent.call().isSane()
        assert crowdsale.call().getState() == CrowdsaleState.PreFunding   # PreFunding for the final, as it is deployed pre-opening

        # Do a test buy using a test address.
        # This ensures are variables are set and the funds flow in the multisig wallet.
        confirm_tx(crowdsale.transact({"from": deploy_address, "value": to_wei("0.01", "ether")}).buy())

        # As the last action, after successful deployment, set the right token symbol and name so that it shows in a blockchain explorer
        confirm_tx(token.transact({"from": deploy_address}).setTokenInformation("CoinHunt", "CHUNT"))

kovan:

    # This is the chain name in populus.json
    # In the default configuration this Ethereum JSON-RPC in port 8547.
    # Edit populus.json to change the port.
    # You can run Parity as:
    # parity \
    #   --chain=kovan \
    #   --unlock [My deploy account on Parity] \
    #   --jsonrpc-port 8547 \
    #   --password=password.txt
    #
    # password.txt must contain your Parity Kovan account unlock password
    chain: kovan

    # Use automated Chrome to verify all contracts on etherscan.io
    verify_on_etherscan: yes
    browser_driver: chrome

    solc:

        # This is the Solidity version tag we verify on EtherScan.
        # For available versions see
        # https://kovan.etherscan.io/verifyContract2
        #
        # See values in Compiler drop down.
        # You can also get the local compiler version with:
        #
        #     solc --version
        #
        # Note that for EtherScan you need to add letter "v" at the front of the version
        #
        # Note: You need to have correct optmization settings for the compiler
        # in populus.json that matches what EtherScan is expecting.
        #
        version: v0.4.16+commit.d7661dd9.Linux.g++

        #
        # We supply these to EtherScan as the solc settings we used to compile the contract.
        # They must match values in populus.json compilication / backends section.
        #
        optimizations:
            optimizer: true
            runs: 500

    contracts:
        # This is the address of the "Team multisignature wallet" where the payments eventually land
        # Replace with your predeployed multisignature wallet contract address.
        #
        # We assume this wallet has been deployed beforehand using wallet.gnosis.pm service and your team members
        # have been set as the owners of this wallet.
        #
        # For testing purposes, e.g. on local/Kovan network you can use any account on your geth / Parity here.
        #
        team_multisig:
            contract_name: MultiSigWallet
            contract_file: GnosisWallet.sol
            address: ""

	   #
        # Pre-ICO fund collector
        #
        # Pre-ICO contract allows high volume investors to place their
        # Pre-ICO has a minimum buy in defined as volume.
        # Pre-ICO investments have a preferred pricing (see later).
        #
        # Pre-ICO owner (team multisig) can set the ICO contract address
        # later, it does not have to be availalble at the start of the ICO.
        # After the ICO contract is set, anyone can trigger the moving of funds
        # to the ICO contract.
        #
        # If the actual ICO does not happen, the investors can claim refund
        # after freezeEndsAt date.
        #
        preico:
            contract_name: PresaleFundCollector
            contract_file: PresaleFundCollector.sol
            arguments:
                _owner: "{{contracts.team_multisig.address}}"
                # Set 30 days in the future from the moment of deployment
                _freezeEndsAt: "{{ time() + 30*24*3600 }}"
                _weiMinimumLimit: "{{ to_wei(100, 'ether') }}"

        #
        # Token contract
        #
        # This contract represents ERC-20 token.
        # It has transfer lock up functionality to prevent the token to be transferable until the ICO is over.
        #
        # We create the whole token supply upfront and no more token minting happens ever.
        #
        # Token has 8 decimals and supply of 1B tokens.
        #
        # Name and symbol are not set yet. They are set later. In the case of the deployment fails and we need redeploy
        # we do not create unnecessary entries in token explorers.
        #
        token:
            contract_name: BurnableCrowdsaleToken
            contract_file: BurnableCrowdsaleToken.sol
            arguments:
                _name: ""
                _symbol: ""
                _initialSupply: "{{ 1000000000*10**8 }}"
                _decimals: 8
                _mintable: false

        #
        # Pricing strategy.
        #
        # Pricing strategy defines the price of a token in the different stages of the crowdsale.
        #
        # We use ETH tranches. People who buy in in the first
        # tranches get 20% and 10% bonus tokens.
        #
        pricing_strategy:
            contract_name: EthTranchePricing
            contract_file: EthTranchePricing.sol
            arguments:
                _tranches:
                    # This trance starts instantly.
                    # How many weis one token costs. 90% bonus tier.
                    # Price is 500 CHUNT / ETH => 0.002 ETH / CHUNT
                    - 0
                    - 2000000000000000

                    # This trance starts when we have sold 50k worth of tokens.
                    # Token price is 75% bonus tokens 100 CHUNT / ETH => 0.005 ETH / CHUNT
                    - "{{ to_wei('30000.00', 'ether') }}"
                    - 5000000000000000

                    # This trance starts when we have sold 100k worth of tokens.
                    # Token price is 50% bonus tokens 100 CHUNT / ETH => 0.01 ETH / CHUNT
                    - "{{ to_wei('100000.00', 'ether') }}"
                    - 10000000000000000

                    # This is the base price that is effective until the token
                    # sale ends. Price is 50 CHUNT / ETH => 0.02 ETH / CHUNT
                    - "{{ to_wei('200000.00', 'ether') }}"
                    - 20000000000000000

                    # Dummy milestone marker to mark the end
                    # of the array.
                    - "{{ to_wei('999999999999999', 'ether') }}"
                    - 0


        #
        # Crowdsale.
        #
        # We use allocated crowdsale as the whole token supply has been created beforehand.
        # No minting. Later we use approve() to give tokens for this contract to be sold.
        #
        crowdsale:
            contract_name: AllocatedCrowdsale
            contract_file: AllocatedCrowdsale.sol
            arguments:
                _token: "{{contracts.token.address}}"
                _pricingStrategy: "{{contracts.pricing_strategy.address}}"
                _multisigWallet: "{{contracts.team_multisig.address}}"
                _start: "{{ timestamp(datetime(2099, 7, 12, 13, 00)) }}"
                _end: "{{ timestamp(datetime(2099, 7, 26, 13, 00)) }}"
                _minimumFundingGoal: "{{ to_wei(10000, 'ether') }}"
                _beneficiary: "{{deploy_address}}"

        #
        # Finalize contract
        #
        # Finalize contract defines what happens at the end of the successful crowdsale.
        #
        # Because deploy_address controls whole supply,
        # we do not create any supply dynamically,
        # we do not need a finalizer.
        #
        finalize_agent:
            contract_name: NullFinalizeAgent
            contract_file: NullFinalizeAgent.sol
            arguments:
                _crowdsale: "{{contracts.crowdsale.address}}"

    # Post-deployment actions connect contracts together.
    # They set ownership and allowed actions, so that contracts can interact
    post_actions: |

        # Allow crowdsale contract to sell its token
        token.transact({"from": deploy_address}).approve(crowdsale.address, 1000000000*10**8)

        # Make sure crowdsale contract and these accounts
        # can transfer tokens despite transfer lock up
        token.transact({"from": deploy_address}).setTransferAgent(team_multisig.address, True)
        token.transact({"from": deploy_address}).setTransferAgent(crowdsale.address, True)
        token.transact({"from": deploy_address}).setTransferAgent(finalize_agent.address, True)
        token.transact({"from": deploy_address}).setTransferAgent(deploy_address, True)

        # Do not do nothing at the end of the crowdsale
        confirm_tx(crowdsale.transact({"from": deploy_address}).setFinalizeAgent(finalize_agent.address))

        # Owner can release the token transfer when he wants to
        confirm_tx(token.transact({"from": deploy_address}).setReleaseAgent(deploy_address))

        # Set token upgrade master to team multisig to give the new token path
        confirm_tx(token.transact({"from": deploy_address}).setUpgradeMaster(team_multisig.address))

        # Allow test buys from these accounts before token sale begins.
        # The latest one is a presale contract address.
        # Presale contract (PreICOProxyBuyer) can move in funds and get tokens before the actual start time.
        confirm_multiple_txs( \
          crowdsale.transact({"from": deploy_address}).setEarlyParicipantWhitelist(deploy_address, True), \
          crowdsale.transact({"from": deploy_address}).setEarlyParicipantWhitelist("0x6d997eDcA04282950416FA380d834f360fC36eBb", True) \
        )

        # We set a special price, outside ETH tranches, for a presale contract
        confirm_tx(pricing_strategy.transact({"from": deploy_address}).setPreicoAddress("0x6d997eDcA04282950416FA380d834f360fC36eBb", 2083333333333))

    # Sanity check
    verify_actions: |
        assert token.call().owner().lower() == deploy_address.lower()
        assert token.call().released() == False
        assert crowdsale.call().owner().lower() == deploy_address.lower()
        assert crowdsale.call().multisigWallet().lower() == team_multisig.address.lower()
        assert finalize_agent.call().isSane()
        assert crowdsale.call().getState() == CrowdsaleState.PreFunding   # PreFunding for the final, as it is deployed pre-opening

        # Do a test buy using a test address.
        # This ensures are variables are set and the funds flow in the multisig wallet.
        confirm_tx(crowdsale.transact({"from": deploy_address, "value": to_wei("0.01", "ether")}).buy())

        # As the last action, after successful deployment, set the right token symbol and name so that it shows in a blockchain explorer
        confirm_tx(token.transact({"from": deploy_address}).setTokenInformation("CoinHunt", "CHUNT"))

main:

    # This is the chain name in populus.json
    # In the default configuration this Ethereum JSON-RPC in port 8547.
    # Edit populus.json to change the port.
    # You can run Parity as:
    # parity \
    #   --chain=kovan \
    #   --unlock [My deploy account on Parity] \
    #   --jsonrpc-port 8547 \
    #   --password=password.txt
    #
    # password.txt must contain your Parity Kovan account unlock password
    chain: mainnet

    # Use automated Chrome to verify all contracts on etherscan.io
    verify_on_etherscan: yes
    browser_driver: chrome

    solc:

        # This is the Solidity version tag we verify on EtherScan.
        # For available versions see
        # https://kovan.etherscan.io/verifyContract2
        #
        # See values in Compiler drop down.
        # You can also get the local compiler version with:
        #
        #     solc --version
        #
        # Note that for EtherScan you need to add letter "v" at the front of the version
        #
        # Note: You need to have correct optmization settings for the compiler
        # in populus.json that matches what EtherScan is expecting.
        #
        version: v0.4.16+commit.d7661dd9.Linux.g++

        #
        # We supply these to EtherScan as the solc settings we used to compile the contract.
        # They must match values in populus.json compilation / backends section.
        #
        optimizations:
            optimizer: true
            runs: 500

    contracts:
        # This is the address of the "Team multisignature wallet" where the payments eventually land
        # Replace with your predeployed multisignature wallet contract address.
        #
        # We assume this wallet has been deployed beforehand using wallet.gnosis.pm service and your team members
        # have been set as the owners of this wallet.
        #
        # For testing purposes, e.g. on local/Kovan network you can use any account on your geth / Parity here.
        #
        team_multisig:
            contract_name: MultiSigWallet
            contract_file: GnosisWallet.sol
            address: ""

	   #
        # Pre-ICO fund collector
        #
        # Pre-ICO contract allows high volume investors to place their
        # Pre-ICO has a minimum buy in defined as volume.
        # Pre-ICO investments have a preferred pricing (see later).
        #
        # Pre-ICO owner (team multisig) can set the ICO contract address
        # later, it does not have to be availalble at the start of the ICO.
        # After the ICO contract is set, anyone can trigger the moving of funds
        # to the ICO contract.
        #
        # If the actual ICO does not happen, the investors can claim refund
        # after freezeEndsAt date.
        #
        preico:
            contract_name: PresaleFundCollector
            contract_file: PresaleFundCollector.sol
            arguments:
                _owner: "{{contracts.team_multisig.address}}"
                # Set 30 days in the future from the moment of deployment
                _freezeEndsAt: "{{ time() + 30*24*3600 }}"
                _weiMinimumLimit: "{{ to_wei(100, 'ether') }}"

        #
        # Token contract
        #
        # This contract represents ERC-20 token.
        # It has transfer lock up functionality to prevent the token to be transferable until the ICO is over.
        #
        # We create the whole token supply upfront and no more token minting happens ever.
        #
        # Token has 8 decimals and supply of 1B tokens.
        #
        # Name and symbol are not set yet. They are set later. In the case of the deployment fails and we need redeploy
        # we do not create unnecessary entries in token explorers.
        #
        token:
            contract_name: BurnableCrowdsaleToken
            contract_file: BurnableCrowdsaleToken.sol
            arguments:
                _name: ""
                _symbol: ""
                _initialSupply: "{{ 1000000000*10**8 }}"
                _decimals: 8
                _mintable: false

        #
        # Pricing strategy.
        #
        # Pricing strategy defines the price of a token in the different stages of the crowdsale.
        #
        # We use ETH tranches. People who buy in in the first
        # tranches get 20% and 10% bonus tokens.
        #
        pricing_strategy:
            contract_name: EthTranchePricing
            contract_file: EthTranchePricing.sol
            arguments:
                _tranches:
                    # This trance starts instantly.
                    # How many weis one token costs. 90% bonus tier.
                    # Price is 500 CHUNT / ETH => 0.002 ETH / CHUNT
                    - 0
                    - 2000000000000000

                    # This trance starts when we have sold 50k worth of tokens.
                    # Token price is 75% bonus tokens 100 CHUNT / ETH => 0.005 ETH / CHUNT
                    - "{{ to_wei('30000.00', 'ether') }}"
                    - 5000000000000000

                    # This trance starts when we have sold 100k worth of tokens.
                    # Token price is 50% bonus tokens 100 CHUNT / ETH => 0.01 ETH / CHUNT
                    - "{{ to_wei('100000.00', 'ether') }}"
                    - 10000000000000000

                    # This is the base price that is effective until the token
                    # sale ends. Price is 50 CHUNT / ETH => 0.02 ETH / CHUNT
                    - "{{ to_wei('200000.00', 'ether') }}"
                    - 20000000000000000

                    # Dummy milestone marker to mark the end
                    # of the array.
                    - "{{ to_wei('999999999999999', 'ether') }}"
                    - 0


        #
        # Crowdsale.
        #
        # We use allocated crowdsale as the whole token supply has been created beforehand.
        # No minting. Later we use approve() to give tokens for this contract to be sold.
        #
        crowdsale:
            contract_name: AllocatedCrowdsale
            contract_file: AllocatedCrowdsale.sol
            arguments:
                _token: "{{contracts.token.address}}"
                _pricingStrategy: "{{contracts.pricing_strategy.address}}"
                _multisigWallet: "{{contracts.team_multisig.address}}"
                _start: "{{ timestamp(datetime(2099, 7, 12, 13, 00)) }}"
                _end: "{{ timestamp(datetime(2099, 7, 26, 13, 00)) }}"
                _minimumFundingGoal: "{{ to_wei(10000, 'ether') }}"
                _beneficiary: "{{deploy_address}}"

        #
        # Finalize contract
        #
        # Finalize contract defines what happens at the end of the successful crowdsale.
        #
        # Because deploy_address controls whole supply,
        # we do not create any supply dynamically,
        # we do not need a finalizer.
        #
        finalize_agent:
            contract_name: NullFinalizeAgent
            contract_file: NullFinalizeAgent.sol
            arguments:
                _crowdsale: "{{contracts.crowdsale.address}}"

    # Post-deployment actions connect contracts together.
    # They set ownership and allowed actions, so that contracts can interact
    post_actions: |

        # Allow crowdsale contract to sell its token
        token.transact({"from": deploy_address}).approve(crowdsale.address, 1000000000*10**8)

        # Make sure crowdsale contract and these accounts
        # can transfer tokens despite transfer lock up
        token.transact({"from": deploy_address}).setTransferAgent(team_multisig.address, True)
        token.transact({"from": deploy_address}).setTransferAgent(crowdsale.address, True)
        token.transact({"from": deploy_address}).setTransferAgent(finalize_agent.address, True)
        token.transact({"from": deploy_address}).setTransferAgent(deploy_address, True)

        # Do not do nothing at the end of the crowdsale
        confirm_tx(crowdsale.transact({"from": deploy_address}).setFinalizeAgent(finalize_agent.address))

        # Owner can release the token transfer when he wants to
        confirm_tx(token.transact({"from": deploy_address}).setReleaseAgent(deploy_address))

        # Set token upgrade master to team multisig to give the new token path
        confirm_tx(token.transact({"from": deploy_address}).setUpgradeMaster(team_multisig.address))

        # Allow test buys from these accounts before token sale begins.
        # The latest one is a presale contract address.
        # Presale contract (PreICOProxyBuyer) can move in funds and get tokens before the actual start time.
        confirm_multiple_txs( \
          crowdsale.transact({"from": deploy_address}).setEarlyParicipantWhitelist(deploy_address, True), \
          crowdsale.transact({"from": deploy_address}).setEarlyParicipantWhitelist("0x6d997eDcA04282950416FA380d834f360fC36eBb", True) \
        )

        # We set a special price, outside ETH tranches, for a presale contract
        confirm_tx(pricing_strategy.transact({"from": deploy_address}).setPreicoAddress("0x6d997eDcA04282950416FA380d834f360fC36eBb", 2083333333333))

    # Sanity check
    verify_actions: |
        assert token.call().owner().lower() == deploy_address.lower()
        assert token.call().released() == False
        assert crowdsale.call().owner().lower() == deploy_address.lower()
        assert crowdsale.call().multisigWallet().lower() == team_multisig.address.lower()
        assert finalize_agent.call().isSane()
        assert crowdsale.call().getState() == CrowdsaleState.PreFunding   # PreFunding for the final, as it is deployed pre-opening

        # Do a test buy using a test address.
        # This ensures are variables are set and the funds flow in the multisig wallet.
        confirm_tx(crowdsale.transact({"from": deploy_address, "value": to_wei("0.01", "ether")}).buy())

        # As the last action, after successful deployment, set the right token symbol and name so that it shows in a blockchain explorer
        confirm_tx(token.transact({"from": deploy_address}).setTokenInformation("CoinHunt", "CHUNT"))

